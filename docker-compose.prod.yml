version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: carrent-mysql-prod
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USERNAME}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "${MYSQL_PORT}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - carrent-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: carrent-backend-prod
    restart: always
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:${MYSQL_PORT}/${MYSQL_DATABASE}
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      REFRESH_TOKEN_EXPIRATION: ${REFRESH_TOKEN_EXPIRATION}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
    ports:
      - "${APP_PORT}:8080"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - carrent-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: carrent-frontend-prod
    restart: always
    environment:
      REACT_APP_API_URL: http://localhost:${APP_PORT}/api
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - carrent-network

  prometheus:
    image: prom/prometheus:latest
    container_name: carrent-prometheus-prod
    restart: always
    volumes:
      - ./backend/src/main/resources/prometheus:/etc/prometheus
    ports:
      - "${PROMETHEUS_PORT}:9090"
    networks:
      - carrent-network

  alertmanager:
    image: prom/alertmanager:latest
    container_name: carrent-alertmanager-prod
    restart: always
    volumes:
      - ./backend/src/main/resources/alertmanager:/etc/alertmanager
    ports:
      - "${ALERTMANAGER_PORT}:9093"
    networks:
      - carrent-network

  grafana:
    image: grafana/grafana:latest
    container_name: carrent-grafana-prod
    restart: always
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY}
    volumes:
      - ./backend/src/main/resources/grafana/dashboards:/var/lib/grafana/dashboards
      - ./backend/src/main/resources/grafana/grafana.ini:/etc/grafana/grafana.ini
      - grafana_data:/var/lib/grafana
    ports:
      - "${GRAFANA_PORT}:3000"
    networks:
      - carrent-network

  node-exporter:
    image: prom/node-exporter:latest
    container_name: carrent-node-exporter-prod
    restart: always
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "${NODE_EXPORTER_PORT}:9100"
    networks:
      - carrent-network

volumes:
  mysql_data:
  grafana_data:

networks:
  carrent-network:
    driver: bridge 