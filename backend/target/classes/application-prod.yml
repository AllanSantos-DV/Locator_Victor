spring:
  application:
    name: carrent-api
  datasource:
    url: jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DATABASE}
    username: ${MYSQL_USERNAME}
    password: ${MYSQL_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        use_sql_comments: false
        type: info
  security:
    jwt:
      secret: ${JWT_SECRET:${application.security.jwt.secret-key}}
      expiration: ${JWT_EXPIRATION:${application.security.jwt.expiration}}
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
    validate-on-migrate: true
  mvc:
    cors:
      allowed-origins: ${CORS_ALLOWED_ORIGINS:https://carrent.com}
      allowed-methods: GET,POST,PUT,DELETE,PATCH,OPTIONS
      allowed-headers: Authorization,Content-Type
      allow-credentials: true
      max-age: 3600

server:
  port: ${PORT:8080}

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /management
    endpoint:
      health:
        show-details: never
      metrics:
        enabled: true
      prometheus:
        enabled: true
  metrics:
    tags:
      application: carrent-api
    distribution:
      percentiles-histogram:
        http.server.requests: true
      sla:
        http.server.requests: 10ms, 50ms, 100ms, 200ms, 500ms
    sampling:
      probability: 1.0

logging:
  level:
    root: WARN
    com.carrent: INFO
    org.springframework.web: WARN
    org.hibernate: WARN
  file:
    name: logs/carrent-api-prod.log

springdoc:
  api-docs:
    path: /api-docs
    enabled: true
  swagger-ui:
    enabled: true
    operations-sorter: method
    tags-sorter: alpha
    try-it-out-enabled: false
    filter: true
  show-actuator: true
  paths-to-match: /api/**
  group-configs:
    - group: 'default'
      paths-to-match: '/**'
      packages-to-scan: com.carrent.web.controller

# Configurações de Rate Limiting
resilience4j:
  ratelimiter:
    instances:
      basic:
        limitForPeriod: 100
        limitRefreshPeriod: 1s
        timeoutDuration: 0 